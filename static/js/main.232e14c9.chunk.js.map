{"version":3,"sources":["request.js","Banner.js","unavailable.js","Row.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEYY","requests","fetchTrending","fetchNetflixOriginals","process","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","useState","movie","setMovie","trailerUrll","setTrailerUrll","useEffect","a","axios","get","request","data","results","Math","floor","random","length","fetchData","str","n","className","style","backgroundImage","backdrop_path","backgroundPosition","backgroundSize","backgroundRepeat","name","original_name","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","overview","substr","videoId","opts","height","width","playerVars","autoplay","unavailableLandscape","base_url","base_Url","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","src","poster_path","alt","id","Nav","show","setHandleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAEMA,G,MAAW,oCAaFC,EAXE,CACfC,cAAc,6CAAD,OAA+CF,GAC5DG,sBAAsB,0CAAD,OAA4CC,oCACjEC,cAAc,4BAAD,OAA8BD,mCAA9B,mBACbE,kBAAkB,2BAAD,OAA6BF,mCAA7B,mBACjBG,kBAAkB,2BAAD,OAA6BH,mCAA7B,mBACjBI,kBAAkB,2BAAD,OAA6BR,EAA7B,mBACjBS,mBAAmB,2BAAD,OAA6BT,EAA7B,sBAClBU,mBAAmB,2BAAD,OAA6BV,EAA7B,oB,oFCHL,SAASW,EAAT,GAAkC,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,SAAY,EACrBC,mBAAS,IADY,mBACxCC,EADwC,KACjCC,EADiC,OAETF,mBAAS,IAFA,mBAExCG,EAFwC,KAE3BC,EAF2B,KAI/CC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAPjB,+BAOgCrB,EAASI,eADpC,cACVkB,EADU,OAGhBP,EACEO,EAAQC,KAAKC,QACXC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAL7C,kBAQTN,GARS,2CAAH,qDAUfO,KACC,CAACjB,IAGJ,IAAkBkB,EAAKC,EAkCvB,OACE,oCACIf,GACA,sBACEgB,UAAU,qBACVC,MAAO,CACLC,gBAAgB,QAAD,OA7DV,uCA6DU,cAAqBpB,QAArB,IAAqBA,OAArB,EAAqBA,EAAOqB,cAA5B,MACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aANtB,UASE,sBAAKN,UAAU,kBAAf,UACE,oBAAIA,UAAU,eAAd,UACQ,OAALlB,QAAK,IAALA,OAAA,EAAAA,EAAOH,SAAP,OAAgBG,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOyB,QAAvB,OAA+BzB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO0B,iBAEzC,sBAAKR,UAAU,iBAAf,UACE,yBACEA,UAAU,gBACVS,QAAS,kBA/CH,SAAC3B,GACfE,EACFC,EAAe,IAEfyB,KAAkB,OAAL5B,QAAK,IAALA,OAAA,EAAAA,EAAOyB,QAAP,OAAezB,QAAf,IAAeA,OAAf,EAAeA,EAAOH,QAChCgC,MAAK,SAACC,GAEL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnD/B,EAAe4B,EAAUxB,IAAI,SAE9B4B,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAqCPG,CAAYvC,IAF7B,iBAIO,OAEP,wBAAQkB,UAAU,gBAAlB,yBAGF,oBAAIA,UAAU,qBAAd,UA5DQF,EA6DG,OAAChB,QAAD,IAACA,OAAD,EAACA,EAAOwC,SA7DNvB,EA6DgB,KA5D3B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKF,QAASG,EAAID,EAAIyB,OAAO,EAAGxB,EAAI,GAAK,MAAQD,QA+DlD,qBAAKE,UAAU,0BAInB,qBAAKA,UAAU,iBAAf,SACGhB,GACC,gCACE,cAAC,IAAD,CAASwC,QAASxC,EAAayC,KAhD5B,CACXC,OAAQ,MACRC,MAAO,OAGPC,WAAY,CACVC,SAAU,MA4CF,wBACE7B,UAAU,iBACVS,QAAS,kBAtDdxB,EAAe,KAoDZ,0BCpGP,IAAM6C,EACX,2FCQIC,G,MAAW,uCACXC,EAAW,+BACF,SAAStD,EAAT,GAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUqD,EAAc,EAAdA,WAAc,EAC/BpD,mBAAS,IADsB,mBACpDqD,EADoD,KAC5CC,EAD4C,OAEvBtD,mBAAS,IAFc,mBAEpDuD,EAFoD,KAExCC,EAFwC,KAI3DnD,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAAI2C,EAAWpD,GAD7C,cACQU,EADR,OAEE6C,EAAU7C,EAAQC,KAAKC,SAFzB,kBAISF,GAJT,4CADc,uBAAC,WAAD,wBAOdO,KAEC,CAACjB,IAEJ,IAQMyC,EAAc,SAACvC,GACfsD,EACFC,EAAc,IAEd3B,KAAkB,OAAL5B,QAAK,IAALA,OAAA,EAAAA,EAAOyB,QAAP,OAAezB,QAAf,IAAeA,OAAf,EAAeA,EAAOH,QAChCgC,MAAK,SAACC,GAEL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDqB,EAAcxB,EAAUxB,IAAI,SAE7B4B,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAIpC,OACE,gCACE,6BAAKvC,IACL,qBAAKqB,UAAU,cAAf,SAEGkC,EAAOI,KAAI,SAACxD,GAAD,OACVmD,EACE,qBAEExB,QAAS,kBAAMY,EAAYvC,IAC3BkB,UAAS,qBAAgBiC,GAAc,oBACvCM,IACEzD,EAAM0D,YAAN,UACOT,GADP,OACkBjD,EAAM0D,aACpBV,EAENnD,MAAOG,EAAMH,OAASG,EAAMyB,KAC5BkC,IAAK3D,EAAMH,OAASG,EAAMyB,MATrBzB,EAAM4D,IAYb,qBAEEjC,QAAS,kBAAMY,EAAYvC,IAE3BkB,UAAS,qBAAgBiC,GAAc,oBACvCM,IACEzD,EAAMqB,cAAN,UACO4B,GADP,OACkBjD,EAAMqB,eACpB2B,EAENnD,MAAOG,EAAMH,OAASG,EAAMyB,KAC5BkC,IAAI,IAVC3D,EAAM4D,SAgBlBN,GAAc,cAAC,IAAD,CAASZ,QAASY,EAAYX,KA3DpC,CACXC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACVC,SAAU,S,MCIDc,MA/Bf,WAAgB,IAAD,EACiB9D,oBAAS,GAD1B,mBACN+D,EADM,KACAC,EADA,KAcb,OAXA3D,qBAAU,WAMR,OALA4D,OAAOC,iBAAiB,UAAU,WAC5BD,OAAOE,QAAU,IACnBH,GAAc,GACTA,GAAc,MAEhB,WACLC,OAAOG,oBAAoB,aAE5B,IAGD,sBAAKjD,UAAS,cAAS4C,GAAQ,aAA/B,UACE,qBACE5C,UAAU,WACVuC,IAAKpE,oCACLsE,IAAI,iBAGN,qBACEzC,UAAU,aACVuC,IAAKpE,8CACLsE,IAAI,uB,MCMGS,MA3Bf,WACE,OACE,sBAAKlD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAGA,cAAC,EAAD,CACErB,MAAM,mBACNC,SAAUZ,EAASE,sBACnB+D,YAAY,IAEd,cAAC,EAAD,CAAKtD,MAAM,eAAeC,SAAUZ,EAASC,gBAC7C,cAAC,EAAD,CAAKU,MAAM,WAAWC,SAAUZ,EAASI,gBACzC,cAAC,EAAD,CAAKO,MAAM,gBAAgBC,SAAUZ,EAASM,oBAC9C,cAAC,EAAD,CAAKK,MAAM,iBAAiBC,SAAUZ,EAASQ,qBAC/C,cAAC,EAAD,CACEG,MAAM,gBACNC,SAAUZ,EAASS,mBACnBwD,YAAY,IAEd,cAAC,EAAD,CAAKtD,MAAM,gBAAgBC,SAAUZ,EAASO,oBAC9C,cAAC,EAAD,CAAKI,MAAM,gBAAgBC,SAAUZ,EAASK,wBClBrC8E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.232e14c9.chunk.js","sourcesContent":["// Courtesy TMDB Movie database API\n\nconst API_KEYY = \"f1f50d42b515c8ba85e1478b56a4d418\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?language=en-US&api_key=${API_KEYY}`,\n  fetchNetflixOriginals: `/discover/tv?with_networks=213&api_key=${process.env.REACT_APP_API_KEY}`,\n  fetchTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEYY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEYY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEYY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Banner.css\";\nimport axios from \"axios\";\nimport requests from \"./request\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst base_Url = \"https://api.themoviedb.org/3\";\nexport default function Row({ title, fetchUrl }) {\n  const [movie, setMovie] = useState([]);\n  const [trailerUrll, setTrailerUrll] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await axios.get(base_Url + requests.fetchTopRated);\n\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n  // run [], run once when the row loads, and dont run again.\n  // `url(${require(\"./resources/img/banners/3.jpg\")})`\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 7) + \"...\" : str;\n  };\n\n  // movie play\n\n  const handleClick = (movie) => {\n    if (trailerUrll) {\n      setTrailerUrll(\"\");\n    } else {\n      movieTrailer(movie?.name || movie?.title)\n        .then((url) => {\n          // https://www.youtube.com/watch?v=XtMThy8QKqU\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrll(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  const handleClicked = (movie) => {\n    return setTrailerUrll(\"\");\n  };\n  const opts = {\n    height: \"448\",\n    width: \"100%\",\n    // object-fit: contain,\n    // height: 448px\\,\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  // console.log(movie);\n  return (\n    <header>\n      {!trailerUrll && (\n        <div\n          className=\"banner banner--top\"\n          style={{\n            backgroundImage: `url(\"${base_url}${movie?.backdrop_path}\")`,\n            backgroundPosition: \"center\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"banner_contents\">\n            <h1 className=\"banner_title\">\n              {movie?.title || movie?.name || movie?.original_name}\n            </h1>\n            <div className=\"banner_buttons\">\n              <button\n                className=\"banner_button\"\n                onClick={() => handleClick(movie)}\n              >\n                Play{\" \"}\n              </button>\n              <button className=\"banner_button\">My List </button>\n            </div>\n\n            <h1 className=\"banner_description\">\n              {truncate(movie?.overview, 150)}\n            </h1>\n          </div>\n          <div className=\"banner--fadeBottom\"></div>\n        </div>\n      )}\n\n      <div className=\"banner_buttons\">\n        {trailerUrll && (\n          <div>\n            <YouTube videoId={trailerUrll} opts={opts} />\n            {\n              <button\n                className=\"banner_buttonn\"\n                onClick={() => handleClicked(movie)}\n              >\n                Stop\n              </button>\n            }\n          </div>\n        )}\n      </div>\n    </header>\n    // <header\n    //   className=\"banner\"\n    //   style={{\n    //     backgroundImage: `url(\"${base_url}${movie?.backdrop_path}\")`,\n    //     backgroundPosition: \"center\",\n    //     backgroundSize: \"cover\",\n    //     backgroundRepeat: \"no-repeat\",\n    //   }}\n    // >\n    //   <div className=\"banner_contents\">\n    //     <h1 className=\"banner_title\">\n    //       {movie?.title || movie?.name || movie?.original_name}\n    //     </h1>\n    //     <div className=\"banner_buttons\">\n    //       <button className=\"banner_button\">Play </button>\n    //       <button className=\"banner_button\">My List </button>\n    //     </div>\n\n    //     <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n    //   </div>\n    //   <div className=\"banner--fadeBottom\"></div>\n    // </header>\n  );\n}\n","// contentModal\nexport const unavailableLandscape =\n  \"https://user-images.githubusercontent.com/10515204/56117400-9a911800-5f85-11e9-878b-3f99\";\n","import React, { useState, useEffect } from \"react\";\n// with default in axios\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { unavailableLandscape } from \"./unavailable\";\n\nimport \"./Row.css\";\n// contentModal\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst base_Url = \"https://api.themoviedb.org/3\";\nexport default function Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(base_Url + fetchUrl);\n      setMovies(request.data.results);\n      // console.log(request.data.results);\n      return request;\n    }\n    fetchData();\n    // run [], run once when the row loads, and dont run again.\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  // check if the trainlerUrl is already open then close it\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || movie?.title)\n        .then((url) => {\n          // https://www.youtube.com/watch?v=XtMThy8QKqU\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  // console.log(movies);\n  return (\n    <div>\n      <h3>{title}</h3>\n      <div className=\"row_posters\">\n        {/* several row of movies */}\n        {movies.map((movie) =>\n          isLargeRow ? (\n            <img\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\n              src={\n                movie.poster_path\n                  ? `${base_url}${movie.poster_path}`\n                  : unavailableLandscape\n              }\n              title={movie.title || movie.name}\n              alt={movie.title || movie.name}\n            />\n          ) : (\n            <img\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              // use conditional setting for which class name to use for specific type of image\n              className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\n              src={\n                movie.backdrop_path\n                  ? `${base_url}${movie.backdrop_path}`\n                  : unavailableLandscape\n              }\n              title={movie.title || movie.name}\n              alt=\"\"\n              // alt={movie.title || movie.name}\n            />\n          )\n        )}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n//  <h2>{title}</h2>\n//       <div className=\"row_posters\">\n{\n  /* several row of movies */\n}\n// {movies.map((movie) => (\n//   <img\n//     key={movie.id}\n//     onClick={() => handleClick(movie)}\n// use conditional setting for which class name to use for specific type of image\n//       className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\n//       src={`${base_url}${\n//         isLargeRow ? movie.poster_path : movie.backdrop_path\n//       }`}\n//       alt={movie.name}\n//     />\n//   ))}\n// </div>\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n// import logo from \"/public/logo/logo.png\";\n\nfunction Nav() {\n  const [show, setHandleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        setHandleShow(true);\n      } else setHandleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  // using string template nav class always but if the show is true set class to nav-black\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src={process.env.PUBLIC_URL + \"/logo/logo.png\"}\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        className=\"nav_avatar\"\n        src={process.env.PUBLIC_URL + \"/logo/Netflix-avatar.png\"}\n        alt=\"Netflix Avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\nimport Row from \"./Row\";\nimport Nav from \"./Nav\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n\n      {/* rows of movies base on title group */}\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TopRated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row\n        title=\"Documentaries\"\n        fetchUrl={requests.fetchDocumentaries}\n        isLargeRow={false}\n      />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}