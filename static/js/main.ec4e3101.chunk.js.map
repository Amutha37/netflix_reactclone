{"version":3,"sources":["Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["base_Url","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","axios","get","request","data","results","fetchData","console","log","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","setMovie","Math","floor","random","length","str","n","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","original_name","overview","substr","Nav","show","setHandleShow","window","addEventListener","scrollY","removeEventListener","process","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec4e3101.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// with default in axios\n// import instance from \"./axios\";\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst base_Url = \"https://api.themoviedb.org/3\";\nexport default function Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(base_Url + fetchUrl);\n\n      // const request = await axiosInstance.get(fetchUrl);\n      // console.log(request);\n      setMovies(request.data.results);\n      // console.log(request.data.results);\n      // alert(\"here\");\n      return request;\n    }\n    fetchData();\n    // run [], run once when the row loads, and dont run again.\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  // check if the trainlerUrl is already open then close it\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || movie?.title)\n        .then((url) => {\n          // https://www.youtube.com/watch?v=XtMThy8QKqU\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  console.log(movies);\n  return (\n    <div>\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {/* several row of movies */}\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            // use conditional setting for which class name to use for specific type of image\n            className={`row_poster ${isLargeRow && \"row_posterLarger\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n","const API_KEY = \"f1f50d42b515c8ba85e1478b56a4d418\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Banner.css\";\nimport axios from \"axios\";\nimport requests from \"./request\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst base_Url = \"https://api.themoviedb.org/3\";\nexport default function Row({ title, fetchUrl }) {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await axios.get(\n        base_Url + requests.fetchNetflixOriginals\n      );\n\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n  // run [], run once when the row loads, and dont run again.\n  // `url(${require(\"./resources/img/banners/3.jpg\")})`\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 7) + \"...\" : str;\n  };\n\n  console.log(movie);\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundImage: `url(\"${base_url}${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play </button>\n          <button className=\"banner_button\">My List </button>\n        </div>\n\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner--fadeBottom\"></div>\n    </header>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n// import logo from \"/public/logo/logo.png\";\n\nfunction Nav() {\n  const [show, setHandleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        setHandleShow(true);\n      } else setHandleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  // using string template nav class always but if the show is true set class to nav-black\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src={process.env.PUBLIC_URL + \"/logo/logo.png\"}\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        className=\"nav_avatar\"\n        src={process.env.PUBLIC_URL + \"/logo/Netflix-avatar.png\"}\n        alt=\"Netflix Avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"./request\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n\n      {/* rows of movies base on title group */}\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TopRated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}